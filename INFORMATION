Run this in terminal: cd /Users/viggorey/Desktop/lab-inventory
Then: npm run dev




### SUPABASE

Supabase Organisation: The Federle Lab
Supabase password: CamponotusLigniperdus1
https://supabase.com/dashboard/project/lmijffjvwpfmvccbgiyr/building

(Project settings>API)
Project URL: https://lmijffjvwpfmvccbgiyr.supabase.co
anon/public key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtaWpmZmp2d3BmbXZjY2JnaXlyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg4NTgzMzIsImV4cCI6MjA1NDQzNDMzMn0.o-HyE-oUtF85k-hk1pJGJEyiTvLDuC1VNLf9dqsAgfA


# Make first admin (register on website>supabase SQL editor and run this)
-- First, lets verify the user exists and get their UUID
SELECT id, email 
FROM auth.users 
WHERE email = 'vr382@cam.ac.uk';

-- After confirming the ID, update their role to admin
UPDATE profiles 
SET role = 'admin' 
WHERE id = (
  SELECT id 
  FROM auth.users 
  WHERE email = 'vr382@cam.ac.uk'
);

-- Verify the change
SELECT profiles.*, auth.users.email 
FROM profiles 
JOIN auth.users ON profiles.id = auth.users.id 
WHERE auth.users.email = 'vr382@cam.ac.uk';










### LAB - INVENTORY STRUCTURE AND FUNCTION

lab-inventory/
├── src/                      # Source code directory
│   ├── app/                  # Next.js app directory
│   │   └── page.tsx         # Main page of your application
│   └── components/          # React components
│       └── InventorySystem.tsx  # Your inventory management component
├── public/                   # Static files (images, etc.)
├── node_modules/            # Installed dependencies
├── package.json             # Project configuration and dependencies
├── package-lock.json        # Exact dependency versions
└── tailwind.config.ts       # Tailwind CSS configuration


##Key files and their purposes:

#src/app/page.tsx: (ALSO EDITED BUT MOSTLY DELETED)

This is your main page
It imports and displays the InventorySystem component
Uses the 'use client' directive because it contains client-side code

#src/components/InventorySystem.tsx: (THE ONE I EDITED)

Contains your main inventory management interface
Handles all the functionality:

Adding new items
Searching items
Excel import/export
Data display in a table format

#tailwind.config.ts:

Configures Tailwind CSS
Defines where to look for CSS classes
Sets up any theme customizations

#package.json:

Lists all project dependencies
Contains scripts like npm run dev
Defines project metadata


#The application currently:

Uses React for the user interface
Uses TypeScript for type safety
Uses Tailwind CSS for styling
Includes XLSX library for Excel file handling
Uses Lucide React for icons

When you run npm run dev, Next.js:

#Starts a development server
Watches for file changes
Provides hot reloading (updates as you make changes)
Runs at http://localhost:3000